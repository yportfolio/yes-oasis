// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id
  email       String    @unique
  firstname   String
  lastname    String
  avatar_url  String
  bio         String    @default("")
  posts       Post[]
  comments    Comment[]
  likes       Like[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  followed_by Follows[] @relation("followed_by")
  following   Follows[] @relation("following")
}

model Post {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  title      String
  content    String
  summary    String
  published  Boolean   @default(false)
  created_by User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id    String
  comment    Comment[]
  like       Like[]
}

model Comment {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  content     String
  created_by  User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id     String
  created_for Post     @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  post_id     String
  like        Like[]
}

model Like {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  created_by User     @relation(fields: [user_id], references: [id])
  user_id    String

  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String?
}

model Follows {
  followed_by    User   @relation("followed_by", fields: [followed_by_id], references: [id])
  followed_by_id String
  following      User   @relation("following", fields: [following_id], references: [id])
  following_id   String

  @@id([followed_by_id, following_id])
}

enum Role {
  ADMIN
  USER
}
